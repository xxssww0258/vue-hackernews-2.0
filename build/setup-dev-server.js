//======================================== 开发用的服务器 ========================================

const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const chokidar = require('chokidar') // fs.watch 解决watch的bug
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')

// 安全的同步读取文件 这里的fs 不是node的 fs 而是内存文件 mfs
const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {}
}

// 安装开发服务器
module.exports = function setupDevServer (app, templatePath, cb) {
  let bundle
  let template
  let clientManifest

  let ready
  const readyPromise = new Promise(r => { ready = r })
  // 更新视图
  const update = () => {
    if (bundle && clientManifest) {
      ready()//  触发上面的resolve()
      cb(bundle, { // 因为这是promise 这一行先执行 再执行上面的ready 的promise 回调
        template,
        clientManifest
      })
    }
  }

  // read template from disk and watch 监听index.template.html文件修改 这个第三方库 监听比较屌 还能监听文件名修改
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
  })

  // modify client config to work with hot middleware 添加 Webpack-hot-middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // ======================================== 客户端编译 ========================================
  // 告诉express使用webpack-dev-middleware并使用webpack.config.js配置文件作为基础
  // dev middleware 添加  webpack-dev-middleware 输出的文件存在于内存中
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  })
  app.use(devMiddleware)
  clientCompiler.plugin('done', stats => { // 因为这里时异步所以这个模块采用 Promise
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(  // 主要是把这个 manifest.json 导出去
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    update()
  })

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))

  // ======================================== 服务端编译 ========================================
  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {// 观察全部文件
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))// 主要是把这个 bundle.json 导出去
    update()
  })

  return readyPromise
}
